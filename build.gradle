apply plugin: 'java'
apply plugin: 'application'
apply plugin: "sonar-runner"

sourceCompatibility = 1.8
buildscript{
    repositories {
        mavenCentral()
        mavenLocal()
        mavenCentral()
        maven { url 'http://repository.jboss.com/maven2/' }
        maven { url 'http://repo.qtonecloud.cn/content/groups/public/' }
        maven { url 'https://repo.eclipse.org/content/repositories/paho-releases/'}
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots'}
        jcenter()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.eclipse.org/content/repositories/paho-releases/'}
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots'}
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springbootVersion}"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.6"
        classpath "org.springframework.build.gradle:propdeps-plugin:0.0.7"
        classpath "se.transmode.gradle:gradle-docker:1.2"
        classpath "io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE"
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.4'
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1+'
    }
}


apply plugin: 'java'
sourceCompatibility=1.8
targetCompatibility=1.8
apply plugin: 'maven'
apply plugin: 'propdeps'
apply plugin: 'io.spring.dependency-management'



test {
    include '**/*UnitTest*'
    include '**/*IntTest*'

    ignoreFailures true
    reports.html.enabled = false
}



task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

/** 此闭包内的声明子类皆可使用 */
allprojects {
    group = 'com.power'
    version = '0.0.1-SNAPSHOT'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'spring-boot'

    repositories {
        mavenCentral()
        mavenLocal()
        mavenCentral()
        maven { url 'http://repository.jboss.com/maven2/' }
        jcenter()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
    idea{
        module{
            inheritOutputDirs = false
            outputDir= file("$buildDir/classes/main/")
        }
    }
}

task createREADME() {
    file("README.md").createNewFile()
}

subprojects {

    task "createJavaProject" << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }

        /** 可选生成子文件夹 */
        file("src/main/filters").mkdirs()
        file("src/main/assembly").mkdirs()
        file("src/main/config").mkdirs()
        file("src/main/scripts").mkdirs()

        /** 填充文件，便于git提交 */
        file("src/main/java/com/power").mkdirs()
        file("src/main/java/com/power/package-info.java").createNewFile()
        file("src/main/resources").mkdirs()
        file("src/main/resources/spring.xml").createNewFile()

        file("src/test/java/com/power").mkdirs()
        file("src/test/java/com/power/package-info.java").createNewFile()
        file("src/test/resources/spring.xml").createNewFile()
    }

    configurations {
        provided
        compile.extendsFrom provided

        all*.exclude group: 'org.springframework', module: 'spring'
        all*.exclude group: 'asm', module: 'asm'
        all*.exclude group: 'log4j', module: 'log4j'
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
}

configure(subprojects.findAll { it.name.contains('war') }) {
    apply plugin: 'war'

    task createWebProject(dependsOn: 'createJavaProject') << {
        def webAppDir = file("$webAppDirName")
        webAppDir.mkdirs()
    }
}